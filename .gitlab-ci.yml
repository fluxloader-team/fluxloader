stages:
    - build
    - upload
    - release

variables:
    OUTPUT_DIR: dist
    PACKAGE_VERSION: "$CI_COMMIT_TAG"
    PACKAGE_NAME: "fluxloader"
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${PACKAGE_VERSION}"

.build_template:
    stage: build
    tags:
        - linux
    image: node:20
    before_script:
        - dpkg --add-architecture i386
        - >-
            apt-get update && apt-get install -y --no-install-recommends
            wine wine32:i386
            build-essential gcc g++ make git python3
            dpkg fakeroot
            libarchive-tools
            icnsutils graphicsmagick xz-utils
            clang libc++-dev libc++abi-dev libgconf-2-4 rpm libx11-dev libxkbfile-dev
            libsecret-1-dev libgbm-dev
            && rm -rf /var/lib/apt/lists/*
        - npm install -g npm@latest
        - npm cache clean --force
        - npm install --legacy-peer-deps --no-audit --prefer-offline --progress=false
    script:
        - set -eo pipefail
        - |
            if [ -n "$CI_COMMIT_TAG" ]; then
              EFFECTIVE_BUILD_VERSION="$CI_COMMIT_TAG"
            else
              EFFECTIVE_BUILD_VERSION=$(node -p "require('./package.json').version" || echo "error")
              if [ "$EFFECTIVE_BUILD_VERSION" == "error" ] || [ -z "$EFFECTIVE_BUILD_VERSION" ]; then
                echo "Error: Cannot read version from package.json"
                exit 1
              fi
            fi
            export EFFECTIVE_BUILD_VERSION
        - rm -rf $OUTPUT_DIR && mkdir -p $OUTPUT_DIR

build-windows-x64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        # Changed: Target is now only 'portable'. Removed nsis config.
        - ./node_modules/.bin/electron-builder --win portable --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.exe # Only expect the portable exe now
        expire_in: 1 week

build-windows-arm64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        # Changed: Target is now only 'portable'. Removed nsis config.
        - ./node_modules/.bin/electron-builder --win portable --arm64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.exe # Only expect the portable exe now
        expire_in: 1 week

build-windows-legacy-x64:
    extends: .build_template
    before_script:
        - !reference [.build_template, before_script]
        - echo "Installing legacy Electron version $LEGACY_ELECTRON_VERSION..."
        - npm install --save-dev electron@$LEGACY_ELECTRON_VERSION --legacy-peer-deps --no-audit
        - echo "Legacy Electron installed."
    script:
        - !reference [.build_template, script]
        # This build still produces an NSIS installer by default
        - ./node_modules/.bin/electron-builder --win nsis --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*-Legacy*.exe
            - $OUTPUT_DIR/*-Legacy*.blockmap
        expire_in: 1 week

build-linux-x64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --linux AppImage deb --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.AppImage
            - $OUTPUT_DIR/*.deb
        expire_in: 1 week

build-linux-arm64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --linux AppImage deb --arm64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.AppImage
            - $OUTPUT_DIR/*.deb
        expire_in: 1 week

build-macos-x64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --mac zip --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION" --config.mac.identity=null
    artifacts:
        paths:
            - $OUTPUT_DIR/*.zip
        expire_in: 1 week

build-macos-arm64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --mac zip --arm64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION" --config.mac.identity=null
    artifacts:
        paths:
            - $OUTPUT_DIR/*.zip
        expire_in: 1 week

upload:
    stage: upload
    image: curlimages/curl:latest
    tags:
        - linux
    needs:
        - job: build-windows-x64
          artifacts: true
        - job: build-linux-x64
          artifacts: true
        - job: build-linux-arm64
          artifacts: true
        - job: build-windows-arm64
          artifacts: true
        - job: build-windows-legacy-x64
          artifacts: true
        - job: build-macos-x64
          artifacts: true
        - job: build-macos-arm64
          artifacts: true
    rules:
        - if: $CI_COMMIT_TAG
    script:
        - |
            for f in $OUTPUT_DIR/*; do
              echo "Uploading $f to ${PACKAGE_REGISTRY_URL}/$(basename "$f")"
              curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "$f" "${PACKAGE_REGISTRY_URL}/$(basename "$f")"
            done

# Release job

release-job:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    tags:
        - linux
    needs:
        - job: upload
    rules:
        - if: $CI_COMMIT_TAG
          when: always
    script:
        - release-cli create \
          --name "Release $CI_COMMIT_TAG" \
          --tag-name "$CI_COMMIT_TAG" \
          --description "Automated release for $CI_COMMIT_TAG" \
          --assets-link "{\"name\":\"Windows x64 Portable\",\"url\":\"${PACKAGE_REGISTRY_URL}/Fluxloader%202.0.0.exe\"}" \
          --assets-link "{\"name\":\"Linux x64 AppImage\",\"url\":\"${PACKAGE_REGISTRY_URL}/Fluxloader-2.0.0.AppImage\"}" \
          --assets-link "{\"name\":\"Linux arm64 AppImage\",\"url\":\"${PACKAGE_REGISTRY_URL}/Fluxloader-2.0.0-arm64.AppImage\"}" \
          --assets-link "{\"name\":\"Linux x64 .deb\",\"url\":\"${PACKAGE_REGISTRY_URL}/sandustry-fluxloader_2.0.0_amd64.deb\"}" \
          --assets-link "{\"name\":\"Linux arm64 .deb\",\"url\":\"${PACKAGE_REGISTRY_URL}/sandustry-fluxloader_2.0.0_arm64.deb\"}" \
          --assets-link "{\"name\":\"macOS x64\",\"url\":\"${PACKAGE_REGISTRY_URL}/Fluxloader-2.0.0-mac.zip\"}" \
          --assets-link "{\"name\":\"macOS arm64\",\"url\":\"${PACKAGE_REGISTRY_URL}/Fluxloader-2.0.0-arm64-mac.zip\"}"
