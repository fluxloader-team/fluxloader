stages:
    - build
    - release

variables:
    OUTPUT_DIR: dist
    APP_ID: "app.fluxloader.Fluxloader"
    PRODUCT_NAME: "Fluxloader"
    LEGACY_ELECTRON_VERSION: "22.3.27"

.build_template:
    stage: build
    tags:
        - linux
    image: node:20
    before_script:
        - dpkg --add-architecture i386
        - >-
            apt-get update && apt-get install -y --no-install-recommends
            wine wine32:i386
            build-essential gcc g++ make git python3
            dpkg fakeroot
            libarchive-tools
            icnsutils graphicsmagick xz-utils
            clang libc++-dev libc++abi-dev libgconf-2-4 rpm libx11-dev libxkbfile-dev
            libsecret-1-dev libgbm-dev
            && rm -rf /var/lib/apt/lists/*
        - echo "--- Wine Debug Info ---"
        - which wine || echo "wine not found in PATH"
        - which wine64 || echo "wine64 not found in PATH"
        - which wine32 || echo "wine32 not found in PATH"
        - dpkg -l | grep wine || echo "No wine packages found via dpkg"
        - wine --version || echo "wine --version command failed"
        - echo "--- Environment PATH ---"
        - printenv PATH
        - echo "--- End Debug Info ---"
        - npm install -g npm@latest
        - echo "Cleaning npm cache..."
        - npm cache clean --force
        - echo "Installing project dependencies (including electron-builder from package.json)..."
        - npm install --legacy-peer-deps --no-audit --prefer-offline --progress=false
        - echo "Node modules installed."
        - ls node_modules || echo "node_modules not found after install!"
        - echo "Verifying electron-builder version:"
        - ./node_modules/.bin/electron-builder --version || echo "Cannot get electron-builder version via direct path"
    script:
        - set -eo pipefail
        - |
            if [ -n "$CI_COMMIT_TAG" ]; then
              echo "Using Git tag for build version: $CI_COMMIT_TAG"
              EFFECTIVE_BUILD_VERSION="$CI_COMMIT_TAG"
            else
              echo "No Git tag found. Using package.json version."
              EFFECTIVE_BUILD_VERSION=$(node -p "require('./package.json').version" || echo "error")
              if [ "$EFFECTIVE_BUILD_VERSION" == "error" ] || [ -z "$EFFECTIVE_BUILD_VERSION" ]; then
                echo "Error: Cannot read version from package.json"
                exit 1
              fi
              echo "Using package.json version: $EFFECTIVE_BUILD_VERSION"
            fi
            export EFFECTIVE_BUILD_VERSION
        - echo "Starting build for $CI_JOB_NAME with version $EFFECTIVE_BUILD_VERSION"
        - rm -rf $OUTPUT_DIR && mkdir -p $OUTPUT_DIR

build-windows-x64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        # Changed: Target is now only 'portable'. Removed nsis config.
        - ./node_modules/.bin/electron-builder --win portable --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.exe # Only expect the portable exe now
        expire_in: 1 week

build-windows-arm64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        # Changed: Target is now only 'portable'. Removed nsis config.
        - ./node_modules/.bin/electron-builder --win portable --arm64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.exe # Only expect the portable exe now
        expire_in: 1 week

build-windows-legacy-x64:
    extends: .build_template
    before_script:
        - !reference [.build_template, before_script]
        - echo "Installing legacy Electron version $LEGACY_ELECTRON_VERSION..."
        - npm install --save-dev electron@$LEGACY_ELECTRON_VERSION --legacy-peer-deps --no-audit
        - echo "Legacy Electron installed."
    script:
        - !reference [.build_template, script]
        # This build still produces an NSIS installer by default
        - ./node_modules/.bin/electron-builder --win nsis --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*-Legacy*.exe
            - $OUTPUT_DIR/*-Legacy*.blockmap
        expire_in: 1 week

build-linux-x64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --linux AppImage deb --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.AppImage
            - $OUTPUT_DIR/*.deb
        expire_in: 1 week

build-linux-arm64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --linux AppImage deb --arm64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION"
    artifacts:
        paths:
            - $OUTPUT_DIR/*.AppImage
            - $OUTPUT_DIR/*.deb
        expire_in: 1 week

build-macos-x64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --mac zip --x64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION" --config.mac.identity=null
    artifacts:
        paths:
            - $OUTPUT_DIR/*.zip
        expire_in: 1 week

build-macos-arm64:
    extends: .build_template
    script:
        - !reference [.build_template, script]
        - ./node_modules/.bin/electron-builder --mac zip --arm64 --config.buildVersion="$EFFECTIVE_BUILD_VERSION" --config.mac.identity=null
    artifacts:
        paths:
            - $OUTPUT_DIR/*.zip
        expire_in: 1 week
release-job:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    tags:
        - linux
    needs:
        - job: build-linux-x64
          artifacts: true
        - job: build-linux-arm64
          artifacts: true
        - job: build-windows-x64
          artifacts: true
        - job: build-windows-arm64
          artifacts: true
        - job: build-windows-legacy-x64
          artifacts: true
        - job: build-macos-x64
          artifacts: true
        - job: build-macos-arm64
          artifacts: true
    rules:
        - if: $CI_COMMIT_TAG
          when: always
    script:
        - echo "Creating GitLab Release for tag $CI_COMMIT_TAG"

        - echo "Listing contents of $OUTPUT_DIR from all jobs..."
        - find . -type f | grep -i fluxloader || echo "No Fluxloader artifacts found"
        - echo "Creating GitLab Release for tag $CI_COMMIT_TAG"
        - release-cli create \
          --name "Release $CI_COMMIT_TAG" \
          --tag-name "$CI_COMMIT_TAG" \
          --description "Automated release for $CI_COMMIT_TAG" \
          --assets-link \
          "{\"name\":\"Windows x64\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader.exe\"}" \
          --assets-link \
          "{\"name\":\"Windows arm64\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader-arm64.exe\"}" \
          --assets-link \
          "{\"name\":\"Windows Legacy x64 Installer\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader-Legacy-x64.exe\"}" \
          --assets-link \
          "{\"name\":\"Linux x64 AppImage\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader-x64.AppImage\"}" \
          --assets-link \
          "{\"name\":\"Linux arm64 AppImage\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader-arm64.AppImage\"}" \
          --assets-link \
          "{\"name\":\"macOS x64\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader-mac-x64.zip\"}" \
          --assets-link \
          "{\"name\":\"macOS arm64\",\"url\":\"$CI_PROJECT_URL/-/jobs/${CI_JOB_ID}/artifacts/file/$OUTPUT_DIR/Fluxloader-mac-arm64.zip\"}"
